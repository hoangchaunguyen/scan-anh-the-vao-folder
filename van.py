import os
import re
import xlwings as xw
from PIL import ImageGrab
import time
import sys

# T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh
output_folder = "ANHTHE"
os.makedirs(output_folder, exist_ok=True)
print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh: {os.path.abspath(output_folder)}")

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn file Excel
excel_file = "du_lieu.xlsx"  # Thay b·∫±ng t√™n file c·ªßa b·∫°n
print(f"üìä ƒêang m·ªü file Excel: {excel_file}")

# H√†m l√†m s·∫°ch t√™n file
def clean_filename(name):
    cleaned = re.sub(r'[\\/*?:"<>|]', '', str(name)).strip()
    return cleaned if cleaned else "Unknown"

try:
    # Kh·ªüi ƒë·ªông Excel ·ªü ch·∫ø ƒë·ªô ·∫©n
    app = xw.App(visible=False)
    wb = app.books.open(excel_file)
    sheet = wb.sheets.active
    
    # T√¨m h√†ng cu·ªëi c√πng c√≥ d·ªØ li·ªáu trong c·ªôt A
    last_row = sheet.range('A' + str(sheet.cells.last_cell.row)).end('up').row
    print(f"üî¢ T·ªïng s·ªë h√†ng d·ªØ li·ªáu: {last_row - 1} (t·ª´ h√†ng 2 ƒë·∫øn {last_row})")
    
    # L·∫•y t·∫•t c·∫£ h√¨nh ·∫£nh trong sheet
    all_shapes = sheet.shapes
    print(f"üñºÔ∏è T√¨m th·∫•y {len(all_shapes)} h√¨nh ·∫£nh trong sheet")
    
    if not all_shapes:
        print("‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh n√†o trong sheet!")
        wb.close()
        app.quit()
        sys.exit(1)
    
    # T·∫°o danh s√°ch c√°c h√¨nh ·∫£nh v√† v·ªã tr√≠ c·ªßa ch√∫ng
    shapes_info = []
    for shape in all_shapes:
        try:
            # L·∫•y t·ªça ƒë·ªô v√† k√≠ch th∆∞·ªõc h√¨nh ·∫£nh
            top = shape.top
            left = shape.left
            height = shape.height
            width = shape.width
            
            # T√≠nh to√°n v·ªã tr√≠ trung t√¢m
            center_x = left + width / 2
            center_y = top + height / 2
            
            shapes_info.append({
                'shape': shape,
                'top': top,
                'left': left,
                'center_x': center_x,
                'center_y': center_y
            })
        except Exception as e:
            print(f"  ‚ö†Ô∏è L·ªói khi l·∫•y th√¥ng tin h√¨nh ·∫£nh: {str(e)}")
    
    print(f"‚ÑπÔ∏è ƒê√£ thu th·∫≠p th√¥ng tin cho {len(shapes_info)} h√¨nh ·∫£nh")
    
    # L·∫•y th√¥ng tin v·ªã tr√≠ c√°c √¥ trong c·ªôt 3
    print("üîç ƒêang thu th·∫≠p th√¥ng tin v·ªã tr√≠ c√°c √¥...")
    cell_positions = {}
    for row in range(2, last_row + 1):
        try:
            cell = sheet.range((row, 3))  # C·ªôt C
            cell_positions[row] = {
                'top': cell.top,
                'left': cell.left,
                'height': cell.height,
                'width': cell.width
            }
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói t·∫°i h√†ng {row}: {str(e)}")
    
    # √Ånh x·∫° h√¨nh ·∫£nh v√†o c√°c √¥
    image_mapping = {}
    unmatched_shapes = []
    
    # Pass 1: Center-based mapping
    for shape_info in shapes_info:
        closest_row = None
        min_distance = float('inf')
        
        # T√¨m √¥ g·∫ßn nh·∫•t v·ªõi trung t√¢m h√¨nh ·∫£nh
        for row, cell_info in cell_positions.items():
            cell_center_x = cell_info['left'] + cell_info['width'] / 2
            cell_center_y = cell_info['top'] + cell_info['height'] / 2
            
            # T√≠nh kho·∫£ng c√°ch Euclid
            distance = ((shape_info['center_x'] - cell_center_x) ** 2 + 
                        (shape_info['center_y'] - cell_center_y) ** 2) ** 0.5
            
            if distance < min_distance:
                min_distance = distance
                closest_row = row
        
        if closest_row:
            cell_info = cell_positions[closest_row]
            
            # T√≠nh to√°n t·ªça ƒë·ªô trung t√¢m √¥
            cell_center_x = cell_info['left'] + cell_info['width'] / 2
            cell_center_y = cell_info['top'] + cell_info['height'] / 2
            
            # Ki·ªÉm tra xem trung t√¢m ·∫£nh c√≥ n·∫±m trong √¥ kh√¥ng
            center_in_cell = (
                cell_info['left'] <= shape_info['center_x'] <= cell_info['left'] + cell_info['width'] and
                cell_info['top'] <= shape_info['center_y'] <= cell_info['top'] + cell_info['height']
            )
            
            # Ki·ªÉm tra xem trung t√¢m ·∫£nh c√≥ g·∫ßn trung t√¢m √¥ kh√¥ng (dung sai 20 pixel)
            tolerance = 20
            near_center = (
                abs(shape_info['center_x'] - cell_center_x) < tolerance and
                abs(shape_info['center_y'] - cell_center_y) < tolerance
            )
            
            # Ki·ªÉm tra xem ·∫£nh c√≥ n·∫±m trong ranh gi·ªõi √¥ kh√¥ng
            within_boundary = (
                shape_info['left'] >= cell_info['left'] - tolerance and
                shape_info['top'] >= cell_info['top'] - tolerance and
                shape_info['left'] + shape_info['shape'].width <= cell_info['left'] + cell_info['width'] + tolerance and
                shape_info['top'] + shape_info['shape'].height <= cell_info['top'] + cell_info['height'] + tolerance
            )
            
            if center_in_cell or near_center or within_boundary:
                image_mapping[closest_row] = shape_info['shape']
                condition = "trong √¥" if center_in_cell else "g·∫ßn trung t√¢m √¥" if near_center else "trong ranh gi·ªõi √¥"
                print(f"  ‚úÖ √Ånh x·∫° ·∫£nh v√†o h√†ng {closest_row} (kho·∫£ng c√°ch: {min_distance:.2f}, ƒëi·ªÅu ki·ªán: {condition})")
            else:
                unmatched_shapes.append((shape_info, closest_row, min_distance))
                # Ghi log chi ti·∫øt ƒë·ªÉ g·ª° l·ªói
                print(f"  ‚ö†Ô∏è ·∫¢nh g·∫ßn h√†ng {closest_row} nh∆∞ng kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán (kho·∫£ng c√°ch: {min_distance:.2f})")
                print(f"      T·ªça ƒë·ªô ·∫£nh: ({shape_info['center_x']}, {shape_info['center_y']})")
                print(f"      T·ªça ƒë·ªô √¥: ({cell_center_x}, {cell_center_y})")
    
    # Pass 2: Boundary-based mapping for unmatched shapes
    print("\nüîç B·∫Øt ƒë·∫ßu pass 2: √Ånh x·∫° theo ranh gi·ªõi cho ·∫£nh ch∆∞a ƒë∆∞·ª£c √°nh x·∫°")
    for shape_info, closest_row, min_distance in unmatched_shapes:
        cell_info = cell_positions[closest_row]
        tolerance = 30  # Dung sai l·ªõn h∆°n cho pass 2
        
        # Ki·ªÉm tra xem ·∫£nh c√≥ n·∫±m trong ranh gi·ªõi √¥ kh√¥ng v·ªõi dung sai l·ªõn
        within_boundary = (
            shape_info['left'] >= cell_info['left'] - tolerance and
            shape_info['top'] >= cell_info['top'] - tolerance and
            shape_info['left'] + shape_info['shape'].width <= cell_info['left'] + cell_info['width'] + tolerance and
            shape_info['top'] + shape_info['shape'].height <= cell_info['top'] + cell_info['height'] + tolerance
        )
        
        if within_boundary:
            # Ki·ªÉm tra xem h√†ng ƒë√£ c√≥ ·∫£nh ch∆∞a
            if closest_row not in image_mapping:
                image_mapping[closest_row] = shape_info['shape']
                print(f"  ‚úÖ [Pass 2] √Ånh x·∫° ·∫£nh v√†o h√†ng {closest_row} (ƒëi·ªÅu ki·ªán: trong ranh gi·ªõi √¥ m·ªü r·ªông)")
            else:
                print(f"  ‚ö†Ô∏è [Pass 2] H√†ng {closest_row} ƒë√£ c√≥ ·∫£nh, b·ªè qua ·∫£nh th·ª© hai")
        else:
            print(f"  ‚ùå [Pass 2] Kh√¥ng √°nh x·∫° ƒë∆∞·ª£c ·∫£nh cho h√†ng {closest_row} ngay c·∫£ v·ªõi dung sai m·ªü r·ªông")
    
    print(f"üìä T·ªïng s·ªë ·∫£nh ƒë√£ √°nh x·∫°: {len(image_mapping)}/{len(shapes_info)}")
    
    print(f"üìä ƒê√£ √°nh x·∫° {len(image_mapping)} ·∫£nh v√†o c√°c √¥")
    
    processed_count = 0
    missing_images = 0
    
    # Duy·ªát qua t·ª´ng h√†ng d·ªØ li·ªáu ƒë·ªÉ l∆∞u ·∫£nh
    print("\nüöÄ B·∫Øt ƒë·∫ßu xu·∫•t ·∫£nh...")
    for row in range(2, last_row + 1):
        try:
            # ƒê·ªçc d·ªØ li·ªáu nh√¢n vi√™n
            ma_nv = sheet.range(f'A{row}').value
            ho_ten = sheet.range(f'B{row}').value
            
            if not ma_nv or not ho_ten:
                print(f"  ‚è© H√†ng {row}: B·ªè qua v√¨ thi·∫øu m√£ NV ho·∫∑c h·ªç t√™n")
                continue
            
            # X·ª≠ l√Ω m√£ nh√¢n vi√™n: chuy·ªÉn s·ªë th·ª±c th√†nh s·ªë nguy√™n n·∫øu c√≥ ph·∫ßn th·∫≠p ph√¢n .0
            if isinstance(ma_nv, float) and ma_nv.is_integer():
                ma_nv = int(ma_nv)
            
            # T·∫°o t√™n file (ch·ªâ s·ª≠ d·ª•ng m√£ nh√¢n vi√™n)
            filename = f"{clean_filename(ma_nv)}_.png"
            filepath = os.path.join(output_folder, filename)
            
            # Ki·ªÉm tra v√† x·ª≠ l√Ω ·∫£nh
            if row in image_mapping:
                shape = image_mapping[row]
                
                try:
                    max_attempts = 3
                    attempt = 0
                    image = None
                    
                    while attempt < max_attempts and image is None:
                        # Copy h√¨nh ·∫£nh v√†o clipboard
                        shape.api.Copy()
                        time.sleep(0.5)  # TƒÉng th·ªùi gian ch·ªù clipboard
                        image = ImageGrab.grabclipboard()
                        
                        if image:
                            # L∆∞u ·∫£nh
                            image.save(filepath)
                            processed_count += 1
                            print(f"  ‚úÖ ƒê√£ l∆∞u ·∫£nh: {filename}")
                        else:
                            attempt += 1
                            print(f"  ‚ö†Ô∏è L·∫ßn th·ª≠ {attempt}: Kh√¥ng c√≥ ·∫£nh trong clipboard t·∫°i h√†ng {row}")
                    
                    if not image:
                        print(f"  ‚ùå Kh√¥ng c√≥ ·∫£nh sau {max_attempts} l·∫ßn th·ª≠ t·∫°i h√†ng {row}")
                except Exception as e:
                    print(f"  ‚ùå L·ªói khi l∆∞u ·∫£nh: {str(e)}")
            else:
                missing_images += 1
                print(f"  ‚ùå H√†ng {row}: Kh√¥ng c√≥ ·∫£nh ƒë∆∞·ª£c √°nh x·∫°")
                
        except Exception as e:
            print(f"  ‚ö†Ô∏è L·ªói t·∫°i h√†ng {row}: {str(e)}")
    
    print("\nüìä K·∫æT QU·∫¢:")
    print(f"- T·ªïng s·ªë h√†ng ƒë√£ x·ª≠ l√Ω: {last_row - 1}")
    print(f"- S·ªë ·∫£nh ƒë√£ l∆∞u th√†nh c√¥ng: {processed_count}")
    print(f"- S·ªë h√†ng kh√¥ng c√≥ ·∫£nh: {missing_images}")
    
    if processed_count == 0:
        print("\n‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c l∆∞u! Nguy√™n nh√¢n c√≥ th·ªÉ:")
        print("   1. Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ ·∫£nh ch√≠nh x√°c")
        print("   2. L·ªói trong qu√° tr√¨nh copy ·∫£nh v√†o clipboard")
        print("   3. ·∫¢nh ƒë∆∞·ª£c ch√®n d∆∞·ªõi d·∫°ng kh√¥ng h·ªó tr·ª£")
        print("   4. C·∫•u tr√∫c file kh√°c v·ªõi mong ƒë·ª£i")
    
except Exception as e:
    print(f"‚ùå L·ªñI T·ªîNG TH·ªÇ: {str(e)}")
    import traceback
    traceback.print_exc()
finally:
    # ƒê·∫£m b·∫£o ƒë√≥ng ·ª©ng d·ª•ng Excel
    try:
        if 'wb' in locals():
            wb.close()
        if 'app' in locals():
            app.quit()
        print("‚úÖ ƒê√£ ƒë√≥ng ·ª©ng d·ª•ng Excel")
    except:
        pass
