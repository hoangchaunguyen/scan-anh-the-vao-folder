"""
Module xu·∫•t ·∫£nh th·∫ª t·ª´ file Excel

M·ª•c ƒë√≠ch:
    - ƒê·ªçc file Excel ch·ª©a th√¥ng tin nh√¢n vi√™n v√† ·∫£nh th·∫ª
    - X√°c ƒë·ªãnh v·ªã tr√≠ ·∫£nh trong c√°c √¥ t∆∞∆°ng ·ª©ng
    - T·∫°m th·ªùi ph√≥ng to ·∫£nh ƒë·ªÉ l·∫•y ch·∫•t l∆∞·ª£ng g·ªëc
    - Xu·∫•t ·∫£nh ra th∆∞ m·ª•c v·ªõi t√™n file theo m√£ nh√¢n vi√™n
    - Gi·ªØ nguy√™n ƒë·ªãnh d·∫°ng v√† b·ªë c·ª•c file Excel g·ªëc

C√°c ch·ª©c nƒÉng ch√≠nh:
    1. T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh ƒë·∫ßu ra
    2. X√°c ƒë·ªãnh v·ªã tr√≠ ·∫£nh trong c√°c √¥ Excel
    3. T·∫°m th·ªùi ph√≥ng to ·∫£nh ƒë·ªÉ l·∫•y ch·∫•t l∆∞·ª£ng cao
    4. Xu·∫•t ·∫£nh d∆∞·ªõi d·∫°ng PNG ch·∫•t l∆∞·ª£ng cao
    5. Kh√¥i ph·ª•c tr·∫°ng th√°i ban ƒë·∫ßu c·ªßa Excel
"""

import os
import re
import sys
import time
import win32com.client as win32
import pythoncom
from PIL import ImageGrab
import warnings
import traceback

# T·∫Øt c·∫£nh b√°o kh√¥ng c·∫ßn thi·∫øt
warnings.filterwarnings("ignore")

def clean_filename(name):
    """
    L√†m s·∫°ch chu·ªói ƒë·ªÉ t·∫°o t√™n file an to√†n
    
    Args:
        name (str/int): Gi√° tr·ªã ƒë·∫ßu v√†o c√≥ th·ªÉ l√† chu·ªói ho·∫∑c s·ªë
        
    Returns:
        str: T√™n file ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
    """
    # Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng h·ª£p l·ªá trong t√™n file
    cleaned = re.sub(r'[\\/*?:"<>|]', '', str(name)).strip()
    return cleaned if cleaned else "Unknown"

def export_images(excel_file_path, output_folder, scale_factor, wait_time, log_callback=None):
    """
    H√†m ch√≠nh th·ª±c hi·ªán xu·∫•t ·∫£nh t·ª´ Excel
    
    Args:
        excel_file_path (str): ƒê∆∞·ªùng d·∫´n ƒë·∫øn file Excel
        output_folder (str): Th∆∞ m·ª•c l∆∞u ·∫£nh ƒë·∫ßu ra
        scale_factor (float): H·ªá s·ªë ph√≥ng to ·∫£nh ƒë·ªÉ l·∫•y ch·∫•t l∆∞·ª£ng g·ªëc
        wait_time (float): Th·ªùi gian ch·ªù gi·ªØa c√°c thao t√°c (gi√¢y)
        log_callback (function): H√†m callback ƒë·ªÉ ghi log ra giao di·ªán
        
    Returns:
        bool: True n·∫øu th√†nh c√¥ng, False n·∫øu c√≥ l·ªói
    """
    def log(message):
        """Ghi log ra console ho·∫∑c giao di·ªán"""
        print(message)
        if log_callback:
            log_callback(message)
    
    try:
        # T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(output_folder, exist_ok=True)
        log(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh: {os.path.abspath(output_folder)}")
        log(f"üìä ƒêang m·ªü file Excel: {os.path.basename(excel_file_path)}")
        
        # Kh·ªüi t·∫°o m√¥i tr∆∞·ªùng COM
        pythoncom.CoInitialize()
        
        # Kh·ªüi ƒë·ªông Excel ·ªü ch·∫ø ƒë·ªô ·∫©n
        excel = win32.Dispatch('Excel.Application')
        excel.Visible = False
        excel.DisplayAlerts = False
        log("üü¢ ƒê√£ kh·ªüi ƒë·ªông Excel ·ªü ch·∫ø ƒë·ªô ·∫©n")
        
        # M·ªü file Excel
        wb = excel.Workbooks.Open(os.path.abspath(excel_file_path))
        sheet = wb.ActiveSheet
        log("üîì ƒê√£ m·ªü file Excel th√†nh c√¥ng")
        
        # X√°c ƒë·ªãnh h√†ng cu·ªëi c√πng c√≥ d·ªØ li·ªáu
        last_row = sheet.Cells(sheet.Rows.Count, 1).End(win32.constants.xlUp).Row
        log(f"üî¢ T·ªïng s·ªë h√†ng d·ªØ li·ªáu: {last_row - 1} (t·ª´ h√†ng 2 ƒë·∫øn {last_row})")
        
        # L·∫•y t·∫•t c·∫£ h√¨nh ·∫£nh trong sheet
        all_shapes = sheet.Shapes
        log(f"üñºÔ∏è T√¨m th·∫•y {all_shapes.Count} h√¨nh ·∫£nh trong sheet")
        
        # Ki·ªÉm tra n·∫øu kh√¥ng c√≥ ·∫£nh n√†o
        if all_shapes.Count == 0:
            log("‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh n√†o trong sheet!")
            wb.Close(False)
            excel.Quit()
            return False
        
        # L∆∞u tr·ªØ th√¥ng tin h√¨nh ·∫£nh
        shapes_info = []
        for i in range(1, all_shapes.Count + 1):
            shape = all_shapes.Item(i)
            try:
                # L∆∞u tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa ·∫£nh
                shapes_info.append({
                    'shape': shape,
                    'original_top': shape.Top,
                    'original_left': shape.Left,
                    'original_width': shape.Width,
                    'original_height': shape.Height
                })
            except Exception as e:
                log(f"  ‚ö†Ô∏è L·ªói khi l·∫•y th√¥ng tin h√¨nh ·∫£nh: {str(e)}")
        
        log(f"‚ÑπÔ∏è ƒê√£ thu th·∫≠p th√¥ng tin cho {len(shapes_info)} h√¨nh ·∫£nh")
        
        # L·∫•y v·ªã tr√≠ c√°c √¥ trong c·ªôt C (c·ªôt 3)
        log("üîç ƒêang thu th·∫≠p th√¥ng tin v·ªã tr√≠ c√°c √¥...")
        cell_positions = {}
        for row in range(2, last_row + 1):
            try:
                cell = sheet.Cells(row, 3)
                cell_positions[row] = {
                    'top': cell.Top,
                    'left': cell.Left,
                    'height': cell.Height,
                    'width': cell.Width
                }
            except Exception as e:
                log(f"‚ö†Ô∏è L·ªói t·∫°i h√†ng {row}: {str(e)}")
        
        # √Ånh x·∫° h√¨nh ·∫£nh v√†o c√°c √¥ t∆∞∆°ng ·ª©ng
        image_mapping = {}
        unmatched_shapes = []
        
        # B∆∞·ªõc 1: √Ånh x·∫° d·ª±a tr√™n trung t√¢m
        log("\nüîç B·∫Øt ƒë·∫ßu √°nh x·∫° ·∫£nh v√†o c√°c √¥ (Pass 1: D·ª±a tr√™n trung t√¢m)...")
        for shape_info in shapes_info:
            shape = shape_info['shape']
            closest_row = None
            min_distance = float('inf')
            
            # T√≠nh t·ªça ƒë·ªô trung t√¢m h√¨nh ·∫£nh
            center_x = shape.Left + shape.Width / 2
            center_y = shape.Top + shape.Height / 2
            
            # T√¨m √¥ g·∫ßn nh·∫•t v·ªõi ·∫£nh
            for row, cell_info in cell_positions.items():
                cell_center_x = cell_info['left'] + cell_info['width'] / 2
                cell_center_y = cell_info['top'] + cell_info['height'] / 2
                
                # T√≠nh kho·∫£ng c√°ch Euclid
                distance = ((center_x - cell_center_x) ** 2 + 
                            (center_y - cell_center_y) ** 2) ** 0.5
                
                if distance < min_distance:
                    min_distance = distance
                    closest_row = row
            
            if closest_row:
                cell_info = cell_positions[closest_row]
                cell_center_x = cell_info['left'] + cell_info['width'] / 2
                cell_center_y = cell_info['top'] + cell_info['height'] / 2
                
                # Ki·ªÉm tra c√°c ƒëi·ªÅu ki·ªán √°nh x·∫°
                center_in_cell = (
                    cell_info['left'] <= center_x <= cell_info['left'] + cell_info['width'] and
                    cell_info['top'] <= center_y <= cell_info['top'] + cell_info['height']
                )
                
                tolerance = 20
                near_center = (
                    abs(center_x - cell_center_x) < tolerance and
                    abs(center_y - cell_center_y) < tolerance
                )
                
                within_boundary = (
                    shape.Left >= cell_info['left'] - tolerance and
                    shape.Top >= cell_info['top'] - tolerance and
                    shape.Left + shape.Width <= cell_info['left'] + cell_info['width'] + tolerance and
                    shape.Top + shape.Height <= cell_info['top'] + cell_info['height'] + tolerance
                )
                
                # N·∫øu th·ªèa m√£n ƒëi·ªÅu ki·ªán, th√™m v√†o √°nh x·∫°
                if center_in_cell or near_center or within_boundary:
                    image_mapping[closest_row] = shape_info
                    condition = "trong √¥" if center_in_cell else "g·∫ßn trung t√¢m √¥" if near_center else "trong ranh gi·ªõi √¥"
                    log(f"  ‚úÖ √Ånh x·∫° ·∫£nh v√†o h√†ng {closest_row} (kho·∫£ng c√°ch: {min_distance:.2f}, ƒëi·ªÅu ki·ªán: {condition})")
                else:
                    unmatched_shapes.append((shape_info, closest_row, min_distance))
                    log(f"  ‚ö†Ô∏è ·∫¢nh g·∫ßn h√†ng {closest_row} nh∆∞ng kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán (kho·∫£ng c√°ch: {min_distance:.2f})")
        
        # B∆∞·ªõc 2: √Ånh x·∫° cho c√°c ·∫£nh ch∆∞a ƒë∆∞·ª£c x·ª≠ l√Ω (d√πng dung sai l·ªõn h∆°n)
        log("\nüîç B·∫Øt ƒë·∫ßu √°nh x·∫° b·ªï sung (Pass 2: D√πng dung sai r·ªông h∆°n)...")
        for shape_info, closest_row, min_distance in unmatched_shapes:
            shape = shape_info['shape']
            cell_info = cell_positions[closest_row]
            tolerance = 30
            
            within_boundary = (
                shape.Left >= cell_info['left'] - tolerance and
                shape.Top >= cell_info['top'] - tolerance and
                shape.Left + shape.Width <= cell_info['left'] + cell_info['width'] + tolerance and
                shape.Top + shape.Height <= cell_info['top'] + cell_info['height'] + tolerance
            )
            
            if within_boundary:
                if closest_row not in image_mapping:
                    image_mapping[closest_row] = shape_info
                    log(f"  ‚úÖ [Pass 2] √Ånh x·∫° ·∫£nh v√†o h√†ng {closest_row} (ƒëi·ªÅu ki·ªán: trong ranh gi·ªõi √¥ m·ªü r·ªông)")
                else:
                    log(f"  ‚ö†Ô∏è [Pass 2] H√†ng {closest_row} ƒë√£ c√≥ ·∫£nh, b·ªè qua ·∫£nh th·ª© hai")
            else:
                log(f"  ‚ùå [Pass 2] Kh√¥ng √°nh x·∫° ƒë∆∞·ª£c ·∫£nh cho h√†ng {closest_row}")
        
        log(f"üìä T·ªïng s·ªë ·∫£nh ƒë√£ √°nh x·∫°: {len(image_mapping)}/{len(shapes_info)}")
        
        # Xu·∫•t ·∫£nh
        processed_count = 0
        missing_images = 0
        log("\nüöÄ B·∫Øt ƒë·∫ßu xu·∫•t ·∫£nh ch·∫•t l∆∞·ª£ng cao...")
        
        for row in range(2, last_row + 1):
            try:
                # ƒê·ªçc th√¥ng tin nh√¢n vi√™n
                ma_nv = sheet.Cells(row, 1).Value
                ho_ten = sheet.Cells(row, 2).Value
                
                # B·ªè qua n·∫øu thi·∫øu th√¥ng tin
                if not ma_nv or not ho_ten:
                    log(f"  ‚è© H√†ng {row}: B·ªè qua v√¨ thi·∫øu m√£ NV ho·∫∑c h·ªç t√™n")
                    continue
                
                # Chu·∫©n h√≥a m√£ nh√¢n vi√™n
                if isinstance(ma_nv, float) and ma_nv.is_integer():
                    ma_nv = int(ma_nv)
                
                # T·∫°o t√™n file
                filename = f"{clean_filename(ma_nv)}_.png"
                filepath = os.path.join(output_folder, filename)
                
                # X·ª≠ l√Ω n·∫øu c√≥ ·∫£nh √°nh x·∫°
                if row in image_mapping:
                    shape_info = image_mapping[row]
                    shape = shape_info['shape']
                    
                    try:
                        # L∆ØU TR·∫†NG TH√ÅI HI·ªÜN T·∫†I
                        current_top = shape.Top
                        current_left = shape.Left
                        current_width = shape.Width
                        current_height = shape.Height
                        
                        # T·∫†M TH·ªúI PH√ìNG TO ·∫¢NH ƒê·ªÇ L·∫§Y CH·∫§T L∆Ø·ª¢NG G·ªêC
                        shape.Width = current_width * scale_factor
                        shape.Height = current_height * scale_factor
                        
                        # DI CHUY·ªÇN ·∫¢NH RA KH·ªéI V√ôNG HI·ªÇN TH·ªä
                        shape.Top = -1000
                        shape.Left = -1000
                        
                        # SAO CH√âP ·∫¢NH ·ªû CH·∫§T L∆Ø·ª¢NG CAO
                        shape.Copy()
                        time.sleep(wait_time)
                        
                        # L·∫§Y ·∫¢NH T·ª™ CLIPBOARD V√Ä L∆ØU
                        image = ImageGrab.grabclipboard()
                        
                        if image:
                            image.save(filepath, format='PNG')
                            processed_count += 1
                            log(f"  ‚úÖ ƒê√£ l∆∞u ·∫£nh ch·∫•t l∆∞·ª£ng cao: {filename} ({image.width}x{image.height} px)")
                        else:
                            log(f"  ‚ùå Kh√¥ng c√≥ ·∫£nh trong clipboard t·∫°i h√†ng {row}")
                        
                        # KH√îI PH·ª§C TR·∫†NG TH√ÅI BAN ƒê·∫¶U
                        shape.Top = current_top
                        shape.Left = current_left
                        shape.Width = current_width
                        shape.Height = current_height
                        
                    except Exception as e:
                        log(f"  ‚ùå L·ªói khi x·ª≠ l√Ω ·∫£nh h√†ng {row}: {str(e)}")
                        # C·ªë g·∫Øng kh√¥i ph·ª•c tr·∫°ng th√°i n·∫øu c√≥ l·ªói
                        try:
                            shape.Top = current_top
                            shape.Left = current_left
                            shape.Width = current_width
                            shape.Height = current_height
                        except:
                            pass
                else:
                    missing_images += 1
                    log(f"  ‚ùå H√†ng {row}: Kh√¥ng c√≥ ·∫£nh ƒë∆∞·ª£c √°nh x·∫°")
                    
            except Exception as e:
                log(f"  ‚ö†Ô∏è L·ªói t·∫°i h√†ng {row}: {str(e)}")
        
        # B√°o c√°o k·∫øt qu·∫£
        log("\nüìä B√ÅO C√ÅO HO√ÄN TH√ÄNH:")
        log(f"- T·ªïng s·ªë h√†ng ƒë√£ x·ª≠ l√Ω: {last_row - 1}")
        log(f"- S·ªë ·∫£nh ƒë√£ l∆∞u th√†nh c√¥ng: {processed_count}")
        log(f"- S·ªë h√†ng kh√¥ng c√≥ ·∫£nh: {missing_images}")
        
        if processed_count == 0:
            log("\n‚ö†Ô∏è C·∫¢NH B√ÅO: Kh√¥ng c√≥ ·∫£nh n√†o ƒë∆∞·ª£c l∆∞u! Nguy√™n nh√¢n c√≥ th·ªÉ:")
            log("   1. Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠ ·∫£nh")
            log("   2. L·ªói trong qu√° tr√¨nh sao ch√©p ·∫£nh")
            log("   3. ƒê·ªãnh d·∫°ng ·∫£nh kh√¥ng h·ªó tr·ª£")
            log("   4. C·∫•u tr√∫c file Excel kh√¥ng nh∆∞ mong ƒë·ª£i")
        
        return True
    
    except Exception as e:
        log(f"‚ùå L·ªñI T·ªîNG TH·ªÇ: {str(e)}")
        log(traceback.format_exc())
        return False
    
    finally:
        # ƒê·∫£m b·∫£o gi·∫£i ph√≥ng t√†i nguy√™n
        try:
            if 'wb' in locals():
                wb.Close(False)
            if 'excel' in locals():
                excel.Quit()
            pythoncom.CoUninitialize()
            log("‚úÖ ƒê√£ ƒë√≥ng ·ª©ng d·ª•ng Excel v√† gi·∫£i ph√≥ng t√†i nguy√™n")
        except:
            pass

if __name__ == "__main__":
    # H√†m log m·∫∑c ƒë·ªãnh cho ch·∫ø ƒë·ªô d√≤ng l·ªánh
    def log(message):
        print(message)
    
    # Th√¥ng s·ªë m·∫∑c ƒë·ªãnh khi ch·∫°y tr·ª±c ti·∫øp
    print("=" * 50)
    print("B·∫ÆT ƒê·∫¶U QU√Å TR√åNH XU·∫§T ·∫¢NH T·ª™ EXCEL")
    print("=" * 50)
    
    # Ch·∫°y ch∆∞∆°ng tr√¨nh ch√≠nh
    start_time = time.time()
    export_images(
        excel_file_path="B23N OKE.xlsx",
        output_folder="ANHTHE",
        scale_factor=3.0,
        wait_time=0.5,
        log_callback=log
    )
    
    # T√≠nh th·ªùi gian th·ª±c thi
    elapsed_time = time.time() - start_time
    print("\n" + "=" * 50)
    print(f"HO√ÄN T·∫§T SAU {elapsed_time:.2f} GI√ÇY")
    print("=" * 50)